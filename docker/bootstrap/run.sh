#!/usr/bin/env bash

SCRIPT=$(dirname ${BASH_SOURCE[0]})
HERE=$PWD/${SCRIPT#./}

# Defaults:
VERBOSE=yes
FORCE=no
SSL_SUBJ="/C=SE/ST=Sweden/L=Uppsala/O=NBIS/OU=SysDevs/CN=LocalEGA/emailAddress=ega@nbis.se"
PRIVATE=private
DB_USER=postgres
CEGA_MQ_USER=test

GPG_NAME="EGA Sweden"
GPG_COMMENT="@NBIS"
GPG_EMAIL="ega@nbis.se"

function usage {
    echo "Usage: $0 [options]"
    echo -e "\noptions are"
    echo -e "\t--force,-f                   \tForce the re-creation of the subfolders"
    echo -e "\t--private_dir <name>         \tName of the main folder for private data"
    echo -e "\t--gpg_passphrase <value>     \tPassphrase at the GPG key creation"
    echo -e "\t--gpg_name <value>,"
    echo -e "\t--gpg_comment <value>,"
    echo -e "\t--gpg_email <value>,         \tDetails for the GPG key"
    echo -e "\t--rsa_passphrase <value>     \tPassphrase at the RSA key creation"
    echo -e "\t--ssl_subj <value>           \tSubject for the SSL certificates"
    echo -e "\t--ssl_subj <value>           \t[Default: ${SSL_SUBJ}]"
    echo -e "\t--db_user <value>            \tDatabase username [Default: ${DB_USER}]"
    echo -e "\t--db_password <value>        \tDatabase password"
    echo -e "\t--cega_mq_user <value>       \tUsername for the Central EGA message broker"
    echo -e "\t--cega_mq_password <value>   \tPassword for the Central EGA message broker [REQUIRED]"
    echo -e "\t--quiet,-q                   \tRemoves the verbose output"
    echo -e "\t--help,-h                    \tOutputs this message and exits"
    echo -e "\t-- ...                       \tAny other options appearing after the -- will be ignored"
}

# While there are arguments or '--' is reached
while [[ $# -gt 0 ]]; do
    case "$1" in
        --quiet|-q) VERBOSE=no;;
        --help|-h) usage; exit 0;;
        --force|-f) FORCE=yes;;
        --private_dir) PRIVATE=$2; shift;;
        --gpg_passphrase) GPG_PASSPHRASE=$2; shift;;
        --gpg_name) GPG_NAME=$2; shift;;
        --gpg_comment) GPG_COMMENT=$2; shift;;
        --gpg_email) GPG_EMAIL=$2; shift;;
        --rsa_passphrase) RSA_PASSPHRASE=$2; shift;;
        --ssl_subj) SSL_SUBJ=$2; shift;;
        --db_user) DB_USER=$2; shift;;
        --db_password) DB_PASSWORD=$2; shift;;
	--cega_mq_user) CEGA_MQ_USER=$2; shift;;
	--cega_mq_password) CEGA_MQ_PASSWORD=$2; shift;;
        --) shift; break;;
        *) echo "$0: error - unrecognized option $1" 1>&2; usage; exit 1;;
    esac
    shift
done

[[ $VERBOSE == 'no' ]] && exec 1>${HERE}/.log 2>${HERE}/.err

#########################################################################
# Exit if required fields not supplied.
#########################################################################

[[ -z $CEGA_MQ_PASSWORD ]] && echo -e "\n[ERROR] The CentralEGA message broker password is required\n" && usage && exit 1

#########################################################################
# Creating the necessary folders
# Ask recreate them if already existing
#########################################################################

case $PRIVATE in
    /*)  ABS_PRIVATE=$PRIVATE;;
    ./*|../*) ABS_PRIVATE=$PWD/$PRIVATE;;
    *) ABS_PRIVATE=$HERE/$PRIVATE;;
esac

if [[ -d $ABS_PRIVATE ]]; then
    if [[ $FORCE == 'yes' ]]; then
	rm -rf $ABS_PRIVATE
    else
	# Asking
	echo -n "[Warning] The folder \"$ABS_PRIVATE\" already exists. "
	while : ; do # while = In a subshell
	    echo -n -e "Proceed to re-create it? [y/N] "
	    read -t 10 yn
	    case $yn in
		y) rm -rf $ABS_PRIVATE; break;;
		N) echo "Ok. Choose another private directory. Exiting"; exit 1;;
		*) echo "Eh?";;
	    esac
	done
    fi
fi

mkdir -p $ABS_PRIVATE/{gpg,rsa,certs,users,.env.d}

#########################################################################
# Generating the non-supplied values
#########################################################################

function generate_password {
    local size=${1:-16} # defaults to 16 characters
    p=$(python -c "import secrets,string;print(''.join(secrets.choice(string.ascii_letters + string.digits) for i in range(${size})))")
    echo $p
}

[[ -z $GPG_PASSPHRASE ]] && GPG_PASSPHRASE=$(generate_password 16)
[[ -z $RSA_PASSPHRASE ]] && RSA_PASSPHRASE=$(generate_password 16)
[[ -z $DB_PASSWORD ]] && DB_PASSWORD=$(generate_password 16)

SALT=$(generate_password 8)
EGA_USER_PASSWORD_JOHN=$(generate_password 16)
EGA_USER_PASSWORD_JANE=$(generate_password 16)

cat > $ABS_PRIVATE/.trace <<EOF
# 
# Generated by bootstrap/run.sh
#
PRIVATE                = ${PRIVATE}
GPG_PASSPHRASE         = ${GPG_PASSPHRASE}
GPG_NAME               = ${GPG_NAME}
GPG_COMMENT            = ${GPG_COMMENT}
GPG_EMAIL              = ${GPG_EMAIL}
RSA_PASSPHRASE         = ${RSA_PASSPHRASE}
SSL_SUBJ               = ${SSL_SUBJ}
DB_USER                = ${DB_USER}
DB_PASSWORD            = ${DB_PASSWORD}
CEGA_MQ_USER           = ${CEGA_MQ_USER}
CEGA_MQ_PASSWORD       = ${CEGA_MQ_PASSWORD}
SALT                   = ${SALT}
EGA_USER_PASSWORD_JOHN = ${EGA_USER_PASSWORD_JOHN}
EGA_USER_PASSWORD_JANE = ${EGA_USER_PASSWORD_JANE}
EOF
cat $ABS_PRIVATE/.trace

#########################################################################
# And....cue music
#########################################################################

echo -e "\nGenerating the GnuPG key"

cat > $ABS_PRIVATE/gen_key <<EOF
%echo Generating a basic OpenPGP key
Key-Type: RSA
Key-Length: 4096
Name-Real: ${GPG_NAME}
Name-Comment: ${GPG_COMMENT}
Name-Email: ${GPG_EMAIL}
Expire-Date: 0
Passphrase: ${GPG_PASSPHRASE}
# Do a commit here, so that we can later print "done" :-)
%commit
%echo done
EOF

gpg --homedir $ABS_PRIVATE/gpg --batch --generate-key $ABS_PRIVATE/gen_key
chmod 700 $ABS_PRIVATE/gpg

echo "Generating the RSA public and private key"
openssl genpkey -algorithm RSA -out $ABS_PRIVATE/rsa/ega.sec -pkeyopt rsa_keygen_bits:2048
openssl rsa -pubout -in $ABS_PRIVATE/rsa/ega.sec -out $ABS_PRIVATE/rsa/ega.pub

echo "Generating the SSL certificates"
openssl req -x509 -newkey rsa:2048 -keyout $ABS_PRIVATE/certs/ssl.key -nodes -out $ABS_PRIVATE/certs/ssl.cert -sha256 -days 1000 -subj ${SSL_SUBJ}

echo "Generating some fake EGA users"
cat > $ABS_PRIVATE/users/john.yml <<EOF
---
password_hash: $(openssl passwd -1 -salt $SALT $EGA_USER_PASSWORD_JOHN)
EOF
cat > $ABS_PRIVATE/users/jane.yml <<EOF
---
password_hash: $(openssl passwd -1 -salt $SALT $EGA_USER_PASSWORD_JANE)
pubkey: 
EOF

# Populate configs
echo "Creating the EGA configuration files"
cat > $ABS_PRIVATE/keys.conf <<EOF
[DEFAULT]
active_master_key = 1

[master.key.1]
seckey = /etc/ega/rsa/sec.pem
pubkey = /etc/ega/rsa/pub.pem
passphrase = ${RSA_PASSPHRASE}
EOF

cat > $ABS_PRIVATE/ega.conf <<EOF
[DEFAULT]
log = debug

[ingestion]
gpg_cmd = /usr/local/bin/gpg --homedir ~/.gnupg --decrypt %(file)s

## Connecting to Central EGA
[cega.broker]
host = cega_mq
username = ${CEGA_MQ_USER}
password = ${CEGA_MQ_PASSWORD}
vhost = test
heartbeat = 0

[db]
host = ega_db
username = ${DB_USER}
password = ${DB_PASSWORD}
EOF

# Populate env-settings for docker compose
echo "Creating the docker-compose configuration files"
cat > $ABS_PRIVATE/.env.d/db <<EOF
POSTGRES_USER=postgres
POSTGRES_PASSWORD=${DB_PASSWORD}
EOF
cat > $ABS_PRIVATE/.env.d/gpg <<EOF
GPG_PASSPHRASE=${GPG_PASSPHRASE}
EOF

cat > $ABS_PRIVATE/.env <<EOF
COMPOSE_PROJECT_NAME=ega
COMPOSE_FILE=ega.yml
CODE=$HERE/../../src
CONF=$ABS_PRIVATE/ega.conf
KEYS=$ABS_PRIVATE/keys.conf
SSL_CERT=$ABS_PRIVATE/certs/ssl.cert
SSL_KEY=$ABS_PRIVATE/certs/ssl.key
RSA_SEC=$ABS_PRIVATE/rsa/ega.sec
RSA_PUB=$ABS_PRIVATE/rsa/ega.pub
GPG_HOME=$ABS_PRIVATE/gpg
CEGA_USERS=$ABS_PRIVATE/users
EOF

echo "Copying the docker-compose environment"
if [[ -f $HERE/../.env ]]; then
    if [[ $FORCE == 'yes' ]]; then
	rm -f $HERE/../.env
	cp $ABS_PRIVATE/.env $HERE/../.env
    else
	echo -n "[Warning] The .env already exists. "
	while : ; do # while = In a subshell
	    echo -n -e "Proceed to first delete it? [y/N] "
	    read -t 10 yn
	    case $yn in
		y) rm -f $HERE/../.env; cp $ABS_PRIVATE/.env $HERE/../.env; break;;
		N) echo "Ok. Not copying the new one over"; break;;
		*) echo "Eh?";;
	    esac
	done
    fi
fi

if [[ -d $HERE/../.env.d ]]; then
    if [[ $FORCE == 'yes' ]]; then
	rm -rf $HERE/../.env.d
	cp -r $ABS_PRIVATE/.env.d $HERE/../.env.d
    else
	echo -n "[Warning] The folder .env.d already exists. "
	while : ; do # while = In a subshell
	    echo -n -e "Proceed to first delete it? [y/N] "
	    read -t 10 yn
	    case $yn in
		y) rm -f $HERE/../.env.d; cp -r $ABS_PRIVATE/.env.d $HERE/../.env.d; break;;
		N) echo "Ok. Not copying the new ones over"; break;;
		*) echo "Eh?";;
	    esac
	done
    fi
fi

echo -e "\nBootstrap completed"
